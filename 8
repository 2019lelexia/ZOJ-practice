/*********************************
origin
*********************************/
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdbool.h>
int position = 0;
bool check = 0;
int n;
int rn;
int now[30];
int time = 0;
struct node {
	int num;
	int up, down, left, right;
};
struct node place[30];

bool dfs(int position) {
	/*if (check) {
		return 1;
	}*/
	if (position == n * n + 1) {
		/*if (place[now[position]].up == place[now[position - n]].down&&place[now[position]].left == place[now[position - 1]].right) {
			check = 1;
		}*/
		return true;
	}
	/*else if (position == 0) {

	}*/
	/*else {

		if (a != 0 && b != 0) {
			if (place[now[position]].up != place[now[position - n]].down) {
				tcheck = 0;
			}
		}
		if (b != 1) {
			if (place[now[position]].left != place[now[position - 1]].right) {
				tcheck = 0;
			}
		}
		if (tcheck == 0) {
			//position--;
			return;
		}
	}*/
	int a, b;
	a = position / n;
	b = position % n;
	for (int i = 1; i <= rn; i++) {
		if (place[i].num == 0) {
			continue;
		}
		if (a > 0) {
			if ((a == 1 && b != 0) || a > 1) {
				if (place[i].up != place[now[position - n]].down) {
					continue;
				}
			}
		}
		if (b != 1 && place[i].left != place[now[position - 1]].right) {
			continue;
		}
		now[position] = i;
		place[i].num--;
		if (dfs(position + 1)) {
			return true;
		}
		place[i].num++;
	}

	return false;
}

int main() {
	while (1) {
		int j;
		scanf("%d", &n);
		time++;
		position = 1;
		check = false;
		rn = 1;
		int u, r, d, l;
		for (int i = 1; i <= n; i++) {
			now[i] = 0;
		}
		for (int i = 1; i <= n * n; i++) {
			scanf("%d %d %d %d", &u, &r, &d, &l);
			for (j = 1; j <= rn; j++) {
				if (place[j].up == u && place[j].right == r && place[j].down == d && place[j].left == l) {
					place[j].num++;
					break;
				}
			}
			if (j == i) {
				place[rn].up = u;
				place[rn].right = r;
				place[rn].down = d;
				place[rn].left = l;
				place[rn].num = 1;
				rn++;
			}
		}
		if (n <= 0) {
			printf("\n");
			break;
		}
		else if (n == 1) {
			if (time == 1) {
				printf("Game %d: Possible\n", time);
			}
			else {
				printf("\nGame %d: Possible\n", time);
			}
			continue;
		}
		else {
			check = dfs(position);
			if (check== true ) {
				if (time == 1) {
					printf("Game %d: Possible\n", time);
				}
				else {
					printf("\nGame %d: Possible\n", time);
				}
			}
			else {
				if (time == 1) {
					printf("Game %d: Impossible\n", time);
				}
				else {
					printf("\nGame %d: Impossible\n", time);
				}
			}
		}
	}
	return 0;
}

/*2
1 4 5 9
1 4 5 9
5 9 1 4
5 9 1 4
*/

/*****************************************
right version
*****************************************/
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#define MaxN 5

//本结构体对应一个方块，u=up;r=right;d=down;l=left
//urdl分别代表四个三角上的数值；used反映本方块是否已被用到
struct {
	int u;
	int r;
	int d;
	int l;
	bool used;
}Square[MaxN*MaxN]; //最多只会有MaxN平方个方块

int checkedSq[MaxN][MaxN]; //构成一个N*N数组，保存对应位置放置的方块编码

int n; //方块的行和列数，因为是正方形，所以一个数即可
int t; //t=n*n 方块总数
//在每层递归中都需要，所以设为全局遍历

//一个递归函数，crt表示当前正在排列第几块 crt=[0,t-1]
bool ArrangeSq(int crt)
{
	int row, col;
	int i;

	if (crt == t) //因为方块编号是0～t-1，所以到t说明所有方块都找到了合适位置
	{
		return true;
	}

	//由于最后所有方块排成n×n的形势，所以从左向右，从上到下数，第crt个方块必然位于（row，col）
	//行列均以0开头
	row = crt / n;
	col = crt % n;

	for (i = 0; i < t; i++)
	{
		//检查所有方块，看看是否可以放在当前位置
		if (Square[i].used)
			continue; //用过的方块直接跳过
		if (row > 0 && Square[i].u != Square[checkedSq[row - 1][col]].d)
			continue; //从第二行开始，要检查上一行方块的下方数据是否与本方块上方数据一致，不合适则退出
		if (col > 0 && Square[i].l != Square[checkedSq[row][col - 1]].r)
			continue; //若与左方数据不一致，也跳出，试试下一个

		//如果能到达这里，说明找到一个合适的方块了
		checkedSq[row][col] = i; //保存这个方块的编号
		Square[i].used = true;  //调用前标记
		if (ArrangeSq(crt + 1)) //进入递归
			return true;//如果递归带回了好消息，则说明成功了，下面步骤不用做了。直接退回上一级递归

		//如未成功，再试试i++后有没有机会，不过首先得把used恢复，checkSq恢复不恢复不受影响
		Square[i].used = false;
	}
	return false; //如果执行到这一步，证明穷尽所有值，均为找到合适的方块，必然是无解
}

int main()
{
	int i;
	int index = 1;
	bool flag;

	while (1)  //因为输入数据可能有多组
	{
		scanf("%d", &n);
		if (n <= 0)
			break;

		//接收新一组数据前，先初始化
		t = n * n;
		memset(Square, 0, sizeof(Square));
		memset(checkedSq, -1, sizeof(checkedSq));

		//读入输入值，并保存在对应的Square结构中
		for (i = 0; i < t; i++)
		{
			scanf("%d%d%d%d", &(Square[i].u), &(Square[i].r), &(Square[i].d), &(Square[i].l));
			Square[i].used = false;
		}

		flag = ArrangeSq(0);

		if (index != 1) //这个主要是为了满足题目要求中的“空一行”
			printf("\n");

		if (flag)
			printf("Game %d: Possible\n", index);
		else
			printf("Game %d: Impossible\n", index);

		index++;
	}
	return 0;
}

